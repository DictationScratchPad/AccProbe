/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText.h"


IAccessibleEditableText* GetRef( JNIEnv *env, jobject jca){
    jclass cls = env->GetObjectClass(jca);
    jmethodID methID = env->GetMethodID(cls, "internalRef", "()I");
    return (IAccessibleEditableText*) env->CallIntMethod(jca, methID);
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalCopyText
(JNIEnv * env, jobject jca , jint start, jint end){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	BSTR txt;
	HRESULT hr = ptr->copyText(start, end);
	if(hr!=S_OK){
		putErrorCode(_T("copyText"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if ( SUCCEEDED(hr) ) 	
		return true;
	
	return false;
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalCutText
(JNIEnv * env, jobject jca , jint start, jint end){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	HRESULT hr = ptr->cutText(start, end);
	if(hr!=S_OK){
		putErrorCode(_T("cutText"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalDeleteText
(JNIEnv * env, jobject jca , jint start, jint end){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	HRESULT hr = ptr->deleteText(start, end);
	if(hr!=S_OK){
		putErrorCode(_T("deleteText"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalInsertText
(JNIEnv * env, jobject jca, jint index, jstring str){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	jboolean res = true;
	BSTR txt = (BSTR) env->GetStringChars(str, &res);
	CComBSTR bstr(txt);
	BSTR var = bstr.Copy(); 
	HRESULT hr = ptr->insertText(index,&var);
	if(hr!=S_OK){
		putErrorCode(_T("insertText"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalPasteText
(JNIEnv * env, jobject jca , jint index){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	HRESULT hr = ptr->pasteText(index);
	if(hr!=S_OK){
		putErrorCode(_T("pasteText"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalReplaceText
(JNIEnv * env, jobject jca , jint start, jint end, jstring str){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	jboolean res = true;
	LPCSTR txt = env->GetStringUTFChars(str, &res);
	CComBSTR bstr(txt);
	BSTR var = bstr.Copy(); 
	HRESULT hr = ptr->replaceText(start, end, &var);
	if(hr!=S_OK){
		putErrorCode(_T("replaceText"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleEditableText_internalSetAttributes
(JNIEnv * env, jobject jca , jint start, jint end, jstring str){
	IAccessibleEditableText* ptr = GetRef(env,jca);
	jclass stringClass = env->FindClass("java/lang/String");
	jboolean res = true;
	LPCSTR txt = env->GetStringUTFChars(str, &res);
	CComBSTR bTxt(txt);
	BSTR var = bTxt.Copy();
	HRESULT hr = ptr->setAttributes(start,end,&var);
	if(hr!=S_OK){
		putErrorCode(_T("setAttributes"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return 0;
}
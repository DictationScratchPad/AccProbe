/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue.h"


IAccessibleValue* GetRef( JNIEnv *env, jobject jca){
    jclass cls = env->GetObjectClass(jca);
    jmethodID methID = env->GetMethodID(cls, "internalRef", "()I");
    return (IAccessibleValue*) env->CallIntMethod(jca, methID);
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue
 * Method:    internalGetCurrentAccessibleValue
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jobject JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue_internalGetCurrentValue
 (JNIEnv * env, jobject jca) { 	
	 IAccessibleValue* ptr = GetRef(env,jca);
	 VARIANT val;
	 HRESULT hr = ptr->get_currentValue(&val);
     if(hr!=S_OK){
		putErrorCode(_T("currentValue"), CAccessible::getHRESULTString(hr), env, jca);
	 }else if(val.vt==VT_EMPTY){
		 putErrorCode(_T("currentValue"), "VT_EMPTY", env, jca);
	 }else{
		return getString(val, env);
	 }
	 return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue
 * Method:    internalSetCurrentAccessibleValue
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue_internalSetCurrentAccessibleValue
  (JNIEnv * env, jobject jca, jlong value, jstring type) { 
	IAccessibleValue* ptr = GetRef(env,jca);
	jboolean res = true;
	LPCSTR txt = env->GetStringUTFChars(type,0);
	CComBSTR vtType(txt);
	BSTR var = vtType.Copy(); 
	VARIANT val;
	if( !lstrcmp((LPCTSTR)vtType,_T("VT_I4"))){
		val.vt= VT_I4;
		val.lVal = (long)value;
	}else if( !lstrcmp((LPCTSTR)vtType,_T("VT_I8"))){
		val.vt= VT_I8;
		val.llVal = (LONGLONG)value;
		}
	else if( !lstrcmp((LPCTSTR)vtType,_T("VT_R4"))){
		val.vt= VT_R4;
		val.fltVal = (FLOAT)value;
		}
	else if( !lstrcmp((LPCTSTR)vtType,_T("VT_I4"))){
		val.vt= VT_I4;
		val.dblVal = (DOUBLE)value;
		}
	else{
		val.vt= VT_I4;
		val.lVal = (long)value;
		}

	HRESULT hr = ptr->setCurrentValue(val);
	if(hr!=S_OK){
		putErrorCode(_T("setCurrentValue"), CAccessible::getHRESULTString(hr), env, jca);
	}else{
		return true;
	 }
	 return false;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue
 * Method:    internalGetAccessibleValueMax
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jobject JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue_internalGetValueMax
 (JNIEnv * env, jobject jca) { 
	 IAccessibleValue* ptr = GetRef(env,jca);
	 VARIANT val;
	 HRESULT hr = ptr->get_maximumValue(&val);
		if(hr!=S_OK){
			putErrorCode(_T("maximumValue"), CAccessible::getHRESULTString(hr), env, jca);
		}else if(val.vt==VT_EMPTY){
		 putErrorCode(_T("maximumValue"), "VT_EMPTY", env, jca);
		}else{
		return getString(val,env);
	 }
	 return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue
 * Method:    internalGetAccessibleValueMin
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jobject JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleValue_internalGetValueMin
 (JNIEnv * env, jobject jca) {
	 IAccessibleValue* ptr = GetRef(env,jca);
	 VARIANT val;
	 HRESULT hr = ptr->get_minimumValue(&val);
		if(hr!=S_OK){
			putErrorCode(_T("minimumValue"), CAccessible::getHRESULTString(hr), env, jca);
		}else if(val.vt==VT_EMPTY){
		 putErrorCode(_T("minimumValue"), "VT_EMPTY", env, jca);
		}else{
		return getString(val,env);
	 }
	 return 0;
}
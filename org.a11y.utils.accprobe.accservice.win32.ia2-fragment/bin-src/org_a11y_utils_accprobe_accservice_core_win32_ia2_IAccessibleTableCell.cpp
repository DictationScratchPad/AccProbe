/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell.h"

IAccessibleTableCell* GetRef( JNIEnv *env, jobject jca){
    jclass cls = env->GetObjectClass(jca);
    jmethodID methID = env->GetMethodID(cls, "internalRef", "()I");
    return (IAccessibleTableCell*) env->CallIntMethod(jca, methID);
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetColumnExtent
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetColumnExtent
(JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long nCols =0;
	HRESULT hr = ptr->get_columnExtent(&nCols);
	if(hr!=S_OK){
		putErrorCode(_T("columnExtent"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return nCols;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetColumnHeaderCells
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetColumnHeaderCells
(JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long size =0;
	IUnknown** cells=0;
	long maxChildren = 0;
	jintArray childArray =NULL;
	HRESULT	hr = ptr->get_columnHeaderCells(&cells,&size);
	if(hr!=S_OK){
		putErrorCode(_T("columnHeaderCells"), CAccessible::getHRESULTString(hr), env, jca);
	}else if (size >0){
		childArray = env->NewIntArray(size);
		jint* elements = new jint[size];
		for (int i=0; i <size; i++){
				IAccessible2* iAcc = CAccessible2::getIA2FromIUnk(cells[i]);
				elements[i] = (int)new CAccessible2(iAcc);
		}
		env->SetIntArrayRegion(childArray,0,size,elements);
	}
	return childArray;
	
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetColumnIndex
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetColumnIndex
(JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long columnIndex  =0;
	HRESULT hr = ptr->get_columnIndex(&columnIndex );
	if(hr!=S_OK){
		putErrorCode(_T("columnIndex"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return columnIndex ;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetRowExtent
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetRowExtent
  (JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long nRowsSpanned =0;
	HRESULT hr = ptr->get_rowExtent(&nRowsSpanned);
	if(hr!=S_OK){
		putErrorCode(_T("rowExtent"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return nRowsSpanned;
}
/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetRowHeaderCells
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetRowHeaderCells
  (JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long size =0;
	IUnknown** cells=0;
	jintArray childArray = NULL;
	long maxChildren = 0;
	HRESULT hr = ptr->get_rowHeaderCells(&cells,&size);
	if(hr!=S_OK){
		putErrorCode(_T("rowHeaderCells"), CAccessible::getHRESULTString(hr), env, jca);
	}else if (size >0){
		childArray = env->NewIntArray( size);
		jint* elements = new jint[size];
		for (int i=0; i <size; i++){
				IAccessible2* iAcc = CAccessible2::getIA2FromIUnk(cells[i]);
				elements[i] = (int)new CAccessible2(iAcc);
		}
		env->SetIntArrayRegion(childArray,0,size,elements);
	}
	CoTaskMemFree((LPVOID)cells);
	return childArray;
	
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetRowIndex
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetRowIndex
  (JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long rowIndex  =0;
	HRESULT hr = ptr->get_rowIndex(&rowIndex );
	if(hr!=S_OK){
		putErrorCode(_T("rowIndex"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return rowIndex ;
}


/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalIsSelected
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalIsSelected
  (JNIEnv *env, jobject jca){
	boolean isSelected = false;
	IAccessibleTableCell* ptr = GetRef(env,jca);
	HRESULT hr = ptr->get_isSelected(&isSelected);
	if(hr!=S_OK){
		putErrorCode(_T("isSelected"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return isSelected;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetRowColumnExtents
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetRowColumnExtents
  (JNIEnv *env, jobject jca){
	IAccessibleTableCell* ptr = GetRef(env,jca);
	long row =0;
	long col =0;
	long rowExt=0;
	long colExt =0;
	boolean isSel=0;
	jintArray jarray = NULL;
	HRESULT hr =ptr->get_rowColumnExtents(&row, 
							 &col,& rowExt, &colExt, &isSel);
	if(hr!=S_OK){
		putErrorCode(_T("rowColumnExtents"), CAccessible::getHRESULTString(hr), env, jca);
	}
	else{
		jarray = env->NewIntArray(5);
		jint* elements = new jint[5];
		elements[0] =row;
		elements[1] =col;
		elements[2] =rowExt;
		elements[3] =colExt;
		if(isSel==true)
			elements[4]=1;
		else
			elements[4]=0;
		env->SetIntArrayRegion(jarray,0,5,elements);
		
	}
	return jarray;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell
 * Method:    internalGetTable
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IAccessibleTableCell_internalGetTable
 (JNIEnv * env, jobject jca){
	boolean isSelected = false;
	IAccessibleTableCell* ptr = GetRef(env,jca);
	IUnknown* iUnk = NULL;
	IAccessibleTable2* cTbl =NULL;
	HRESULT hr = ptr->get_table(&iUnk);
	if(hr!=S_OK){
		putErrorCode(_T("isSelected"), CAccessible::getHRESULTString(hr), env, jca);
	}
	cTbl = getTableFromIUnk(iUnk);
	return (int) cTbl;
}


IAccessibleTable2* getTableFromIUnk(IUnknown *iUnk){
	
		IAccessibleTable2 *cTbl = NULL;
		IServiceProvider *pProv = NULL;
		HRESULT hr;
		if(iUnk){ 
			hr = iUnk->QueryInterface(IID_IServiceProvider, (void**) &pProv);
		}
	    
		if(SUCCEEDED(hr) && pProv){ 
			hr = pProv->QueryService(IID_IAccessible,IID_IAccessibleTable2,(void**)&cTbl); 
			if(SUCCEEDED(hr) && cTbl){
				return cTbl;
			}
		}
		pProv->Release();
		iUnk->Release();
		return cTbl;
}



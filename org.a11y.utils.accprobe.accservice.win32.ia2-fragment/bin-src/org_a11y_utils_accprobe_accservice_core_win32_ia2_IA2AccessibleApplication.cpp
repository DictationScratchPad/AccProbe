/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication.h"


IAccessibleApplication* GetRef( JNIEnv *env, jobject jca){
    jclass cls = env->GetObjectClass(jca);
    jmethodID methID = env->GetMethodID(cls, "internalRef", "()I");
    return (IAccessibleApplication*) env->CallIntMethod(jca, methID);
}


/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication
 * Method:    internalGetAccessibleApplicationName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication_internalGetApplicationName
 (JNIEnv * env, jobject jca) { 
	IAccessibleApplication* ptr = GetRef(env,jca);
	BSTR str;
	HRESULT hr = ptr->get_appName(&str);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleApplicationName"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if( SUCCEEDED(hr)){
		return CreateString(env, CComBSTR(str));
	}
	return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication
 * Method:    internalGetAccessibleApplicationVersion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication_internalGetApplicationVersion
 (JNIEnv * env, jobject jca) { 	
	IAccessibleApplication* ptr = GetRef(env,jca);
	BSTR str;
	HRESULT hr = ptr->get_appVersion(&str);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleApplicationVersion"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if( SUCCEEDED(hr)){
		return CreateString(env, CComBSTR(str));
	}
	return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication
 * Method:    internalGetAccessibleToolkitName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication_internalGetToolkitName
 (JNIEnv * env, jobject jca) { 	
	IAccessibleApplication* ptr = GetRef(env,jca);
	BSTR str;
	HRESULT hr = ptr->get_toolkitName(&str);
		if(hr!=S_OK){
		putErrorCode(_T("accessibleToolkitName"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if( SUCCEEDED(hr)){
		return CreateString(env, CComBSTR(str));
	}
	return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication
 * Method:    internalGetAccessibleToolkitVersion
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleApplication_internalGetToolkitVersion
 (JNIEnv * env, jobject jca) { 	
	IAccessibleApplication* ptr = GetRef(env,jca);
	BSTR str;
	HRESULT hr = ptr->get_toolkitVersion(&str);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleToolkitVersion"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if( SUCCEEDED(hr)){
		return CreateString(env, CComBSTR(str));
	}
	return 0;
}
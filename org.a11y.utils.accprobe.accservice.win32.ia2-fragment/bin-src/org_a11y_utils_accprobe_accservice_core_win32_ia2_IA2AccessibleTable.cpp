/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable.h"
#include "CAccessible2.h"

IAccessibleTable* GetRef( JNIEnv *env, jobject jca){
    jclass cls = env->GetObjectClass(jca);
    jmethodID methID = env->GetMethodID(cls, "internalRef", "()I");
    return (IAccessibleTable*) env->CallIntMethod(jca, methID);
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleTableCaption
 * Signature: ()Ljava/lang/String; 
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetTableCaption
(JNIEnv * env, jobject jca){

	IAccessibleTable* ptr = GetRef(env,jca);
	BSTR str;
	IUnknown* iUnk = NULL;
	HRESULT hr = ptr->get_caption(&iUnk);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleTableCaption"), CAccessible::getHRESULTString(hr), env, jca);
	}
	IAccessible2* iacc2 =NULL;
	if(SUCCEEDED(hr) && iUnk){
		iacc2 = CAccessible2::getIA2FromIUnk(iUnk);
		if(iacc2)
			return (int) new CAccessible2(iacc2);
	}
	return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleTableSummary
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetTableSummary
(JNIEnv * env, jobject jca){
	IAccessibleTable* ptr = GetRef(env,jca);
	BSTR str;
	IUnknown* iUnk=NULL;
	IAccessible2* iacc2 =NULL;
	HRESULT hr = ptr->get_summary(&iUnk);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleTableSummary"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr) && iUnk){
		iacc2 = CAccessible2::getIA2FromIUnk(iUnk);
		if(iacc2)
			return (int) new CAccessible2(iacc2);
	}
	return (jint)iacc2;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleTableColumnCount
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetTableColumnCount
(JNIEnv * env, jobject jca){
	IAccessibleTable* ptr = GetRef(env,jca);
	BSTR str;
	long colCt =0;
	HRESULT hr = ptr->get_nColumns(&colCt);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleTableColumnCount"), CAccessible::getHRESULTString(hr), env, jca);
	}

	return colCt;
	
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleTableRowCount
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetTableRowCount
(JNIEnv * env, jobject jca){
	IAccessibleTable* ptr = GetRef(env,jca);
	BSTR str;
	long rowCt =0;
	HRESULT hr =ptr->get_nRows(&rowCt);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleTableRowCount"), CAccessible::getHRESULTString(hr), env, jca);
	}

	return rowCt;

}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleColumnDescription
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetColumnDescription
(JNIEnv * env, jobject jca, jlong col){
	IAccessibleTable* ptr = GetRef(env,jca);
	BSTR str;
	
	HRESULT hr =ptr->get_columnDescription(col, &str);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleColumnDescription"), CAccessible::getHRESULTString(hr), env, jca);
	}

	return CreateString(env, CComBSTR(str));

}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleRowDescription
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetRowDescription
(JNIEnv * env, jobject jca, jlong row){

	IAccessibleTable* ptr = GetRef(env,jca);
	BSTR str;
	HRESULT hr = ptr->get_rowDescription(row, &str);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleRowDescription"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return CreateString(env, CComBSTR(str));


}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetSelectedAccessibleColumns
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetSelectedAccessibleColumns
(JNIEnv * env, jobject jca){
	IAccessibleTable* ptr = GetRef(env,jca);
	long size =0;
	long *colArr=0;
	long maxCols = 0;
	HRESULT hr = ptr->get_nSelectedColumns(&maxCols);
	if(hr!=S_OK){
		putErrorCode(_T("selectedAccessibleColumns"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(!SUCCEEDED(hr)){
		return 0;
	}
	hr = ptr->get_selectedColumns(maxCols,&colArr,&size);

	jintArray cols = env->NewIntArray( SUCCEEDED(hr) ? size : 0);
	if (size >0)
	{
		jint* elements = new jint[size];
		if (SUCCEEDED(hr)) {
			for (int i=0; i <size; i++){
					elements[i] = colArr[i];
			}
			env->SetIntArrayRegion(cols,0,size,elements);
		}
	}
	return cols;
	
}
/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetSelectedAccessibleRows
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetSelectedAccessibleRows
(JNIEnv * env, jobject jca){
	IAccessibleTable* ptr = GetRef(env,jca);
	long size =0;
	long *rowArr=0;
	long maxRows = 0;
	HRESULT hr = ptr->get_nSelectedColumns(&maxRows);
	if(hr!=S_OK){
		putErrorCode(_T("selectedAccessibleRows"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(!SUCCEEDED(hr)){
		return 0;
	}
	hr = ptr->get_selectedRows(maxRows,&rowArr,&size);

	jintArray rows = env->NewIntArray( SUCCEEDED(hr) ? size : 0);
	if (size >0)
	{
		jint* elements = new jint[size];
		if (SUCCEEDED(hr)) {
			for (int i=0; i <size; i++){
					elements[i] = rowArr[i];
			}
			env->SetIntArrayRegion(rows,0,size,elements);
		}
	}
	return rows;

}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleCell
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetCell
(JNIEnv * env, jobject jca, jint row, jint col){
	IAccessibleTable* ptr = GetRef(env,jca);
	IUnknown* iUnk = NULL;
	IAccessible2* iacc2 =NULL;
	HRESULT hr = ptr->get_accessibleAt(row, col, &iUnk);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleCell"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr) && iUnk){
		iacc2 = CAccessible2::getIA2FromIUnk(iUnk);
		return (int) new CAccessible2(iacc2);
	}
	return 0;
}


/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleIndex
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetIndex
 (JNIEnv * env, jobject jca, jint rowIndex, jint colIndex) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	long childIndex =0;

	HRESULT hr = ptr->get_childIndex(rowIndex,colIndex,&childIndex);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleIndex"), CAccessible::getHRESULTString(hr), env, jca);
	}

	return childIndex;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleColumnExtentAt
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetColumnExtentAt
 (JNIEnv * env, jobject jca, jint rowIndex, jint colIndex) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	long nCols =0;
	HRESULT hr = ptr->get_columnExtentAt(rowIndex, colIndex, &nCols);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleColumnExtentAt"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return nCols;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleColumnHeaders
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetColumnHeaders
 (JNIEnv * env, jobject jca) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	long startIndex = -1;
	IAccessibleTable* accTable = NULL;
	HRESULT hr = ptr->get_columnHeader(&accTable, &startIndex);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleColumnHeaders"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return (int)accTable;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleColumnIndex
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetColumnIndex
 (JNIEnv * env, jobject jca, jint childIndex) { 
	 IAccessibleTable* ptr = GetRef(env,jca);
	 long colIndex =0;
	 HRESULT hr = ptr->get_columnIndex(childIndex,&colIndex);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleColumnIndex"), CAccessible::getHRESULTString(hr), env, jca);
	}
	 return (int)colIndex;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetSelectedColumnCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetSelectedColumnCount
 (JNIEnv * env, jobject jca) { 	 
	 IAccessibleTable* ptr = GetRef(env,jca);
	 long colCt =0;
	 HRESULT hr = ptr->get_nSelectedColumns(&colCt);
	if(hr!=S_OK){
		putErrorCode(_T("selectedColumnCount"), CAccessible::getHRESULTString(hr), env, jca);
	}
	 return (int)colCt;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetSelectedRowCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetSelectedRowCount
 (JNIEnv * env, jobject jca) { 	 
	 IAccessibleTable* ptr = GetRef(env,jca);
	 long rowCt =0;
	 HRESULT hr = ptr->get_nSelectedRows(&rowCt);
	if(hr!=S_OK){
		putErrorCode(_T("selectedRowCount"), CAccessible::getHRESULTString(hr), env, jca);
	}
	 return (int)rowCt;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleRowExtentAt
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetRowExtentAt
 (JNIEnv * env, jobject jca, jint row, jint col) { 	
	IAccessibleTable* ptr = GetRef(env,jca);
	long nRows =0;
	HRESULT hr = ptr->get_rowExtentAt(row, col, &nRows);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleRowExtentAt"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return (int)nRows;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleRowHeaders
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetRowHeaders
 (JNIEnv * env, jobject jca) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	long startIndex = -1;
	IAccessibleTable* accTable = NULL;
	HRESULT hr = ptr->get_rowHeader(&accTable, &startIndex);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleRowHeaders"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return (int)accTable;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetAccessibleRowIndex
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetRowIndex
 (JNIEnv * env, jobject jca, jint childIndex) { 	 
	 IAccessibleTable* ptr = GetRef(env,jca);
	 long rowIndex =0;
	 HRESULT hr = ptr->get_rowIndex(childIndex,&rowIndex);
	if(hr!=S_OK){
		putErrorCode(_T("accessibleRowIndex"), CAccessible::getHRESULTString(hr), env, jca);
	}
	 return (int)rowIndex;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalIsColumnSelected
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalIsColumnSelected
 (JNIEnv * env, jobject jca, jint col) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	boolean isSel = false;
	HRESULT hr = ptr->get_isColumnSelected(col, &isSel);
	if(hr!=S_OK){
		putErrorCode(_T("isColumnSelected"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return isSel;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalIsRowSelected
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalIsRowSelected
 (JNIEnv * env, jobject jca, jint row) { 	
	IAccessibleTable* ptr = GetRef(env,jca);
	boolean isSel = false;
	HRESULT hr = ptr->get_isRowSelected(row, &isSel);
	if(hr!=S_OK){
		putErrorCode(_T("isRowSelected"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return isSel;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalIsAccessibleSelected
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalIsAccessibleSelected
 (JNIEnv * env, jobject jca, jint row, jint col) { 	
	IAccessibleTable* ptr = GetRef(env,jca);
	boolean isSel = false;
	HRESULT hr = ptr->get_isSelected(row, col, &isSel);
	if(hr!=S_OK){
		putErrorCode(_T("isAccessibleSelected"), CAccessible::getHRESULTString(hr), env, jca);
	}
	return isSel;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalSelectAccessibleColumn
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalSelectAccessibleColumn
 (JNIEnv * env, jobject jca, jint col) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	HRESULT hr = ptr->selectColumn(col);
	if(hr!=S_OK){
		putErrorCode(_T("selectAccessibleColumn"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalSelectAccessibleRow
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalSelectAccessibleRow
 (JNIEnv * env, jobject jca, jint row) { 
	IAccessibleTable* ptr = GetRef(env,jca);
	HRESULT hr = ptr->selectRow(row);
	if(hr!=S_OK){
		putErrorCode(_T("selectAccessibleRow"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalUnselectAccessibleColumn
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalUnselectAccessibleColumn
 (JNIEnv * env, jobject jca, jint col) {
	IAccessibleTable* ptr = GetRef(env,jca);
	HRESULT hr = ptr->unselectColumn(col);
	if(hr!=S_OK){
		putErrorCode(_T("unselectAccessibleColumn"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalUnselectAccessibleRow
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalUnselectAccessibleRow
 (JNIEnv * env, jobject jca, jint row)  { 
	IAccessibleTable* ptr = GetRef(env,jca);
	HRESULT hr = ptr->unselectRow(row);
	if(hr!=S_OK){
		putErrorCode(_T("unselectAccessibleRow"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr))
	{
		return true;
	}
	return false;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetRowColumnExtentsAtIndex
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetRowColumnExtentsAtIndex
 (JNIEnv * env, jobject jca, jint index) { 	
	IAccessibleTable* ptr = GetRef(env,jca);
	long row =0;
	long col =0;
	long rowExt=0;
	long colExt =0;
	boolean isSel=0;
	jintArray jarray = NULL;
	HRESULT hr =ptr->get_rowColumnExtentsAtIndex(index, &row, 
							 &col,& rowExt, &colExt, &isSel);
	if(hr!=S_OK){
		putErrorCode(_T("rowColumnExtentsAtIndex"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr)){
		jarray = env->NewIntArray(5);
		jint* elements = new jint[5];
		elements[0] =row;
		elements[1] =col;
		elements[2] =rowExt;
		elements[3] =colExt;
		if(isSel==true)
			elements[4]=1;
		else
			elements[4]=0;
		env->SetIntArrayRegion(jarray,0,5,elements);
		
	}
	return jarray;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetModelChange
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetModelChange
 (JNIEnv * env, jobject jca) { 	
	IAccessibleTable* ptr = GetRef(env,jca);
	jintArray jarray = NULL;
	IA2TableModelChange modChange;
	HRESULT hr = ptr->get_modelChange(&modChange);
	if(hr!=S_OK){
		putErrorCode(_T("modelChange"), CAccessible::getHRESULTString(hr), env, jca);
	}
	if(SUCCEEDED(hr)){
		jarray = env->NewIntArray(5);
		jint* elements = new jint[5];
		elements[0] = (int) modChange.type;
		elements[1] = modChange.firstRow;
		elements[2] = modChange.lastRow;
		elements[3] = modChange.firstColumn;
		elements[4]=  modChange.lastColumn;
		env->SetIntArrayRegion(jarray,0,5,elements);
		
	}
	return jarray;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetSelectedChildCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetSelectedChildCount
 (JNIEnv * env, jobject jca) { 	 
	 IAccessibleTable* ptr = GetRef(env,jca);
	 long childCt =0;
	 HRESULT hr = ptr->get_nSelectedChildren(&childCt);
	if(hr!=S_OK){
		putErrorCode(_T("selectedChildCount"), CAccessible::getHRESULTString(hr), env, jca);
	}
	 return (int)childCt;
}


/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable
 * Method:    internalGetSelectedChildren
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleTable_internalGetSelectedChildren
(JNIEnv * env, jobject jca){
	IAccessibleTable* ptr = GetRef(env,jca);
	long size =0;
	long *colArr=0;
	long maxChildren = 0;
	HRESULT hr = ptr->get_nSelectedChildren(&maxChildren);
	if(!SUCCEEDED(hr)){
		return 0;
	}
	hr = ptr->get_selectedChildren(maxChildren,&colArr,&size);
	if(hr!=S_OK){
		putErrorCode(_T("selectedChildren"), CAccessible::getHRESULTString(hr), env, jca);
	}

	jintArray childArray = env->NewIntArray( SUCCEEDED(hr) ? size : 0);
	if (size >0)
	{
		jint* elements = new jint[size];
		if (SUCCEEDED(hr)) {
			for (int i=0; i <size; i++){
					elements[i] = colArr[i];
			}
			env->SetIntArrayRegion(childArray,0,size,elements);
		}
	}
	return childArray;
	
}
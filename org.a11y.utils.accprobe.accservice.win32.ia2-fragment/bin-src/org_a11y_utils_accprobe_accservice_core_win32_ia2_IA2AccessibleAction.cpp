/* DO NOT EDIT THIS FILE - it is machine generated */
#include "org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction.h"


IAccessibleAction* GetRef( JNIEnv *env, jobject jca){
    jclass cls = env->GetObjectClass(jca);
    jmethodID methID = env->GetMethodID(cls, "internalRef", "()I");
    return (IAccessibleAction*) env->CallIntMethod(jca, methID);
}


/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction
 * Method:    internalGetAccessibleActionCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction_internalGetActionCount
  (JNIEnv * env, jobject jca) { 
	IAccessibleAction* ptr = GetRef(env,jca);
	long nActions=0;
	HRESULT hr = ptr->nActions(&nActions);
	if(hr!=S_OK){
		putErrorCode(_T("actionCount"), CAccessible::getHRESULTString(hr), env, jca);
	}	
	return (int)nActions;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction
 * Method:    internalDoAccessibleAction
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction_internalDoAccessibleAction
  (JNIEnv * env, jobject jca, jint x) { 
	  IAccessibleAction* ptr = GetRef(env,jca);
	  HRESULT hr = ptr->doAction(x);
	  	if(hr!=S_OK){
		putErrorCode(_T("doAccessibleAction"),CAccessible::getHRESULTString(hr), env, jca);
	  }	
	  if( SUCCEEDED(hr))
	  {
		  return true;
	  }
	  return false;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction
 * Method:    internalGetAccessibleActionDescription
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction_internalGetActionDescription
  (JNIEnv * env, jobject jca, jint x) { 
	  IAccessibleAction* ptr = GetRef(env,jca);
	  BSTR str;
	  HRESULT hr = ptr->get_description((long)x,&str);
	  if(hr!=S_OK){
		putErrorCode(_T("actionDescription"),CAccessible::getHRESULTString(hr), env, jca);
	  }	
	  if( SUCCEEDED(hr))
	  {
		  return CreateString(env, (CComBSTR)str);
	  }

	  return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction
 * Method:    internalGetAccessibleActionKeyBinding
 * Signature: (II)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction_internalGetActionKeyBinding
  (JNIEnv * env, jobject jca, jint x, jint y) { 
	  IAccessibleAction* ptr = GetRef(env,jca);
	  long nBinding = 0;
	  BSTR* str; //maximum 10
	  HRESULT hr = ptr->get_keyBinding((long)x,(long)y, &str, &nBinding);
	  if(hr!=S_OK){
		putErrorCode(_T("actionKeyBinding"), CAccessible::getHRESULTString(hr), env, jca);
	  }
	  if( SUCCEEDED(hr) && nBinding >0)
	  {
		 jclass stringClass = env->FindClass("java/lang/String");
		 jobjectArray jarray = env->NewObjectArray(nBinding, stringClass, env->NewString((jchar*)"",0));
		 for (int i=0; i< nBinding; i++)
		{
			jstring jstr = CreateString(env,(CComBSTR)str[i]);
			env->SetObjectArrayElement(jarray,i,jstr);
		}
		 return jarray;
	
	  }
	  return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction
 * Method:    internalGetAccessibleActionName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction_internalGetActionName
  (JNIEnv * env, jobject jca, jint x) { 
	  IAccessibleAction* ptr = GetRef(env,jca);
	  BSTR str;
	  HRESULT hr = ptr->get_name((long)x, &str);
	  if(hr!=S_OK){
		  putErrorCode(_T("accessibleActionName"),CAccessible::getHRESULTString(hr), env, jca);
	  }
	  if( SUCCEEDED(hr))
	  {
		  return CreateString(env, (CComBSTR)str);
	  }
	  return 0;
}

/*
 * Class:     org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction
 * Method:    internalGetLocalizedAccessibleActionName
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_a11y_utils_accprobe_accservice_core_win32_ia2_IA2AccessibleAction_internalGetLocalizedAccessibleActionName
  (JNIEnv * env, jobject jca, jint x) { 
	  IAccessibleAction* ptr = GetRef(env,jca);
	  BSTR str;
	  HRESULT hr = ptr->get_localizedName((long)x, &str);
	  if(hr!=S_OK){
		putErrorCode(_T("localizedAccessibleActionName"),CAccessible::getHRESULTString(hr), env, jca);
	  }
	  if( SUCCEEDED(hr))
	  {
		  return CreateString(env, (CComBSTR)str);
	  }
	  return 0;
}
